(deffunction plan-assert-action (?name ?robot $?param-values)
" Assert an action with a unique id."
	(bind ?id-sym (gensym*))
	(bind ?id-str (sub-string 4 (length$ ?id-sym) (str-cat ?id-sym)))
	(assert (plan-action (id (string-to-field ?id-str)) (action-name ?name) (executor "fawkes_skiller") (param-values $?param-values)))
)

(deffunction plan-assert-sequential (?plan-name ?goal-id $?action-tuples)
	(bind ?plan-id (sym-cat ?plan-name (gensym*)))
	(assert (plan (id ?plan-id) (goal-id ?goal-id)))
	(bind ?actions (create$))
	; action tuples might contain FALSE in some cases, filter them out
	(foreach ?pa $?action-tuples
		(if ?pa then
			(bind ?actions (append$ ?actions ?pa))
		)
	)
	(foreach ?pa $?actions
		(modify ?pa (id ?pa-index) (plan-id ?plan-id) (goal-id ?goal-id))
	)
)

(defrule goal-expander-move-plate-from-sink-to-counter
    ?g <-   (goal   (id ?goal-id)
                    (class MOVE-PLATE-FROM-SINK-TO-COUNTER)
                    (mode SELECTED)
                    (params order ?order plate ?plate sink ?sink counter ?counter)
                    (assigned-to ?robot&~nil)
            )
    (domain-fact (name at) (param-values ?robot ?pos-start))
    =>
    (plan-assert-sequential (sym-cat MOVE-PLATE-FROM-SINK-TO-COUNTER-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?pos-start ?sink)
        (plan-assert-action get-plate-from-sink ?robot ?sink ?plate ?order)
        (plan-assert-action move-to ?robot ?sink ?counter)
        (plan-assert-action put-plate-on-counter ?robot ?counter ?plate)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-put-cooked-beef-on-plate
    ?g <-   (goal   (id ?goal-id)
                    (class PUT-COOKED-BEEF-ON-PLATE)
                    (mode SELECTED)
                    (params order ?order beef ?beef stove ?stove plate ?plate)
                    (assigned-to ?robot&~nil)
            )
    (domain-fact (name at) (param-values ?robot ?pos-start))
    (domain-fact (name station-type) (param-values ?st-beef STORAGE))
    (domain-fact (name item-at-station) (param-values ?st-beef ?beef))
    (domain-fact (name item-at-station) (param-values ?counter ?plate))
    (domain-fact (name order-slot) (param-values ?order ?slot ?beef))
    =>
    (plan-assert-sequential (sym-cat PUT-COOKED-BEEF-ON-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?pos-start ?st-beef)
        (plan-assert-action get-unprocessed-ingredient-from-storage ?robot ?st-beef ?beef)
        (plan-assert-action move-to ?robot ?st-beef ?stove)
        (plan-assert-action put-beef-on-stove ?robot ?stove ?beef)
        (plan-assert-action stove-cook-beef ?stove ?beef)
        (plan-assert-action take-beef-from-stove ?robot ?stove ?beef)
        (plan-assert-action move-to ?robot ?stove ?counter)
        (plan-assert-action put-ingredient-on-plate ?robot ?counter ?beef BEEF ?plate ?slot)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-put-bun-on-plate
    ?g <-   (goal   (id ?goal-id)
                    (class PUT-BUN-ON-PLATE)
                    (mode SELECTED)
                    (params order ?order bun ?bun plate ?plate)
                    (assigned-to ?robot&~nil)
            )
    (domain-fact (name at) (param-values ?robot ?pos-start))
    (domain-fact (name station-type) (param-values ?st-bun STORAGE))
    (domain-fact (name item-at-station) (param-values ?st-bun ?bun))
    (domain-fact (name item-at-station) (param-values ?counter ?plate))
    (domain-fact (name order-slot) (param-values ?order ?slot ?bun))
    =>
    (plan-assert-sequential (sym-cat PUT-BUN-ON-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?pos-start ?st-bun)
        (plan-assert-action get-processed-ingredient-from-storage ?robot ?st-bun ?bun)
        (plan-assert-action move-to ?robot ?st-bun ?counter)
        (plan-assert-action put-ingredient-on-plate ?robot ?counter ?bun BUN ?plate ?slot)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-put-cheese-on-plate
    ?g <-   (goal   (id ?goal-id)
                    (class PUT-CHEESE-ON-PLATE)
                    (mode SELECTED)
                    (params order ?order cheese ?cheese plate ?plate)
                    (assigned-to ?robot&~nil)
            )
    (domain-fact (name at) (param-values ?robot ?pos-start))
    (domain-fact (name station-type) (param-values ?st-cheese STORAGE))
    (domain-fact (name item-at-station) (param-values ?st-cheese ?cheese))
    (domain-fact (name item-at-station) (param-values ?counter ?plate))
    (domain-fact (name order-slot) (param-values ?order ?slot ?cheese))
    =>
    (plan-assert-sequential (sym-cat PUT-CHEESE-ON-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?pos-start ?st-cheese)
        (plan-assert-action get-processed-ingredient-from-storage ?robot ?st-cheese ?cheese)
        (plan-assert-action move-to ?robot ?st-cheese ?counter)
        (plan-assert-action put-ingredient-on-plate ?robot ?counter ?cheese CHEESE ?plate ?slot)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-put-chopped-lettuce-on-plate
    ?g <-   (goal   (id ?goal-id)
                    (class PUT-CHOPPED-LETTUCE-ON-PLATE)
                    (mode SELECTED)
                    (params order ?order lettuce ?lettuce chopping-board ?cb plate ?plate)
                    (assigned-to ?robot&~nil)
            )
    (domain-fact (name at) (param-values ?robot ?pos-start))
    (domain-fact (name station-type) (param-values ?st-lettuce STORAGE))
    (domain-fact (name item-at-station) (param-values ?st-lettuce ?lettuce))
    (domain-fact (name item-at-station) (param-values ?counter ?plate))
    (domain-fact (name order-slot) (param-values ?order ?slot ?lettuce))
    =>
    (plan-assert-sequential (sym-cat PUT-CHOPPED-LETTUCE-ON-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?pos-start ?st-lettuce)
        (plan-assert-action get-unprocessed-ingredient-from-storage ?robot ?st-lettuce ?lettuce)
        (plan-assert-action move-to ?robot ?st-lettuce ?cb)
        (plan-assert-action put-vegetable-on-chopping-board ?robot ?cb ?lettuce)
        (plan-assert-action chop-vegetable ?robot ?cb ?lettuce)
        (plan-assert-action take-vegetable-from-chopping-board ?robot ?cb ?lettuce)
        (plan-assert-action move-to ?robot ?cb ?counter)
        (plan-assert-action put-ingredient-on-plate ?robot ?counter ?lettuce LETTUCE ?plate ?slot)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-put-chopped-tomato-on-plate
    ?g <-   (goal   (id ?goal-id)
                    (class PUT-CHOPPED-TOMATO-ON-PLATE)
                    (mode SELECTED)
                    (params order ?order tomato ?tomato chopping-board ?cb plate ?plate)
                    (assigned-to ?robot&~nil)
            )
    (domain-fact (name at) (param-values ?robot ?pos-start))
    (domain-fact (name station-type) (param-values ?st-tomato STORAGE))
    (domain-fact (name item-at-station) (param-values ?st-tomato ?tomato))
    (domain-fact (name item-at-station) (param-values ?counter ?plate))
    (domain-fact (name order-slot) (param-values ?order ?slot ?tomato))
    =>
    (plan-assert-sequential (sym-cat PUT-CHOPPED-TOMATO-ON-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?pos-start ?st-tomato)
        (plan-assert-action get-unprocessed-ingredient-from-storage ?robot ?st-tomato ?tomato)
        (plan-assert-action move-to ?robot ?st-tomato ?cb)
        (plan-assert-action put-vegetable-on-chopping-board ?robot ?cb ?tomato)
        (plan-assert-action chop-vegetable ?robot ?cb ?tomato)
        (plan-assert-action take-vegetable-from-chopping-board ?robot ?cb ?tomato)
        (plan-assert-action move-to ?robot ?cb ?counter)
        (plan-assert-action put-ingredient-on-plate ?robot ?counter ?tomato TOMATO ?plate ?slot)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-deliver-plate
    ?g <-   (goal   (id ?goal-id)
                    (class DELIVER-PLATE)
                    (mode SELECTED)
                    (params order ?order plate ?plate delivery ?delivery)
                    (assigned-to ?robot&~nil)
            )
    (domain-fact (name at) (param-values ?robot ?pos-start))
    (domain-fact (name item-at-station) (param-values ?counter ?plate))
    (domain-fact (name order-slot) (param-values ?order ONE ?i1))
    (domain-fact (name order-slot) (param-values ?order TWO ?i2))
    (domain-fact (name order-slot) (param-values ?order THREE ?i3))
    (domain-fact (name order-slot) (param-values ?order FOUR ?i4))
    (domain-fact (name order-slot) (param-values ?order FIVE ?i5))

    =>
    (plan-assert-sequential (sym-cat DELIVER-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?pos-start ?counter)
        (plan-assert-action pick-up-plate-from-counter ?robot ?counter ?plate)
        (plan-assert-action move-to ?robot ?counter ?delivery)
        (plan-assert-action deliver-plate ?robot ?delivery ?plate ?order ?i1 ?i2 ?i3 ?i4 ?i5)
    )
    (modify ?g (mode EXPANDED))
)