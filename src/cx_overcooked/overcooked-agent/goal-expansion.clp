(deffunction plan-assert-action (?name ?robot $?param-values)
" Assert an action with a unique id."
	(bind ?id-sym (gensym*))
	(bind ?id-str (sub-string 4 (length$ ?id-sym) (str-cat ?id-sym)))
	(assert (plan-action (id (string-to-field ?id-str)) (action-name ?name) (robot ?robot) (param-values $?param-values)))
)

(deffunction plan-assert-sequential (?plan-name ?goal-id $?action-tuples)
	(bind ?plan-id (sym-cat ?plan-name (gensym*)))
	(assert (plan (id ?plan-id) (goal-id ?goal-id)))
	(bind ?actions (create$))
	; action tuples might contain FALSE in some cases, filter them out
	(foreach ?pa $?action-tuples
		(if ?pa then
			(bind ?actions (append$ ?actions ?pa))
		)
	)
	(foreach ?pa $?actions
		(modify ?pa (id ?pa-index) (plan-id ?plan-id) (goal-id ?goal-id))
	)
)

(defrule goal-expander-move-plate-from-sink-to-counter
    ?g <-   (goal   (id ?goal-id)
                    (class MOVE-PLATE-FROM-SINK-TO-COUNTER)
                    (mode SELECTED)
                    (params order ?order)
                    (assigned-to ?robot&~nil)
            )
    (wm-fact (key domain fact station-type args? s ?counter tn COUNTER))
    (wm-fact (key domain fact station-type args? s ?sink tn SINK))
    (wm-fact (key domain fact item-at-station args? s ?sink i ?plate))
    (not (wm-fact (key domain fact plate-on-counter args? s ?counter)))
    (wm-fact (key domain fact at args? r ?robot l ?pos-start))
    =>
    (plan-assert-sequential (sym-cat MOVE-PLATE-FROM-SINK-TO-COUNTER-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?pos-start ?sink)
        (plan-assert-action get-plate-from-sink ?robot ?sink ?plate ?order)
        (plan-assert-action move-to ?robot ?sink ?counter)
        (plan-assert-action put-plate-on-counter ?robot ?counter ?plate)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-put-cooked-beef-on-plate
    ?g <-   (goal   (id ?goal-id)
                    (class PUT-COOKED-BEEF-ON-PLATE)
                    (mode SELECTED)
                    (params order ?order)
                    (assigned-to ?robot&~nil)
            )
    (wm-fact (key domain fact ingredient-type args? i ?beef tn BEEF))
    (wm-fact (key domain fact ingredient-state args? i ?beef sn UNPROCESSED))
    (wm-fact (key domain fact item-at-station args? s ?store i ?beef))
    (wm-fact (key domain fact station-type args? s ?store tn STORAGE))
    (wm-fact (key domain fact station-type args? s ?stove tn STOVE))
    (wm-fact (key domain fact station-type args? s ?counter tn COUNTER))
    (wm-fact (key domain fact station-state args? s ?stove sn IDLE))
    (wm-fact (key domain fact plate-for-order args? o ?order p ?plate))
    (wm-fact (key domain fact item-at-station args? s ?counter i ?plate))
    (wm-fact (key domain fact order-slot args? o ?order sl ?slot in BEEF))
    (wm-fact (key domain fact plate-slot args? p ?plate sl ?slot in NONE))
    (wm-fact (key domain fact at args? r ?robot l ?pos-start))
    =>
    (plan-assert-sequential (sym-cat PUT-COOKED-BEEF-ON-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?pos-start ?store)
        (plan-assert-action get-unprocessed-ingredient-from-storage ?robot ?store ?beef)
        (plan-assert-action move-to ?robot ?store ?stove)
        (plan-assert-action put-beef-on-stove ?robot ?stove ?beef)
        (plan-assert-action stove-cook-beef ?stove ?beef)
        (plan-assert-action take-beef-from-stove ?robot ?stove ?beef)
        (plan-assert-action move-to ?robot ?stove ?counter)
        (plan-assert-action put-ingredient-on-plate ?robot ?counter ?beef BEEF ?plate ?slot)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-put-bun-on-plate
    ?g <-   (goal   (id ?goal-id)
                    (class PUT-BUN-ON-PLATE)
                    (mode SELECTED)
                    (params order ?order)
                    (assigned-to ?robot&~nil)
            )
    (wm-fact (key domain fact ingredient-type args? i ?bun tn BUN))
    (wm-fact (key domain fact item-at-station args? s ?store i ?bun))
    (wm-fact (key domain fact station-type args? s ?store tn STORAGE))
    (wm-fact (key domain fact station-type args? s ?counter tn COUNTER))
    (wm-fact (key domain fact plate-for-order args? o ?order p ?plate))
    (wm-fact (key domain fact item-at-station args? s ?counter i ?plate))
    (wm-fact (key domain fact started-order args? o ?order))
    (wm-fact (key domain fact order-slot args? o ?order sl ?slot in BUN))
    (wm-fact (key domain fact plate-slot args? p ?plate sl ?slot in NONE))
    (wm-fact (key domain fact at args? r ?robot l ?pos-start))
    =>
    (plan-assert-sequential (sym-cat PUT-BUN-ON-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?robot ?pos-start ?store)
        (plan-assert-action get-processed-ingredient-from-storage ?robot ?robot ?store ?bun)
        (plan-assert-action move-to ?robot ?robot ?store ?counter)
        (plan-assert-action put-ingredient-on-plate ?robot ?robot ?counter ?bun BUN ?plate ?slot)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-put-cheese-on-plate
    ?g <-   (goal   (id ?goal-id)
                    (class PUT-CHEESE-ON-PLATE)
                    (mode SELECTED)
                    (params order ?order)
                    (assigned-to ?robot&~nil)
            )
    (wm-fact (key domain fact ingredient-type args? i ?cheese tn CHEESE))
    (wm-fact (key domain fact item-at-station args? s ?store i ?cheese))
    (wm-fact (key domain fact station-type args? s ?store tn STORAGE))
    (wm-fact (key domain fact station-type args? s ?counter tn COUNTER))
    (wm-fact (key domain fact plate-for-order args? o ?order p ?plate))
    (wm-fact (key domain fact item-at-station args? s ?counter i ?plate))
    (wm-fact (key domain fact order-slot args? o ?order sl ?slot in CHEESE))
    (wm-fact (key domain fact plate-slot args? p ?plate sl ?slot in NONE))
    (wm-fact (key domain fact at args? r ?robot l ?pos-start))
    =>
    (plan-assert-sequential (sym-cat PUT-CHEESE-ON-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?robot ?pos-start ?store)
        (plan-assert-action get-processed-ingredient-from-storage ?robot ?robot ?store ?cheese)
        (plan-assert-action move-to ?robot ?robot ?store ?counter)
        (plan-assert-action put-ingredient-on-plate ?robot ?robot ?counter ?cheese CHEESE ?plate ?slot)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-put-chopped-lettuce-on-plate
    ?g <-   (goal   (id ?goal-id)
                    (class PUT-CHOPPED-LETTUCE-ON-PLATE)
                    (mode SELECTED)
                    (params order ?order)
                    (assigned-to ?robot&~nil)
            )
    (wm-fact (key domain fact ingredient-type args? i ?lettuce tn LETTUCE))
    (wm-fact (key domain fact ingredient-state args? i ?lettuce sn UNPROCESSED))
    (wm-fact (key domain fact item-at-station args? s ?store i ?lettuce))
    (wm-fact (key domain fact station-type args? s ?store tn STORAGE))
    (wm-fact (key domain fact station-type args? s ?cb tn CHOPPING_BOARD))
    (wm-fact (key domain fact station-type args? s ?counter tn COUNTER))
    (wm-fact (key domain fact station-state args? s ?cb sn IDLE))
    (wm-fact (key domain fact plate-for-order args? o ?order p ?plate))
    (wm-fact (key domain fact item-at-station args? s ?counter i ?plate))
    (wm-fact (key domain fact order-slot args? o ?order sl ?slot in LETTUCE))
    (wm-fact (key domain fact plate-slot args? p ?plate sl ?slot in NONE))
    (wm-fact (key domain fact at args? r ?robot l ?pos-start))
    =>
    (plan-assert-sequential (sym-cat PUT-CHOPPED-LETTUCE-ON-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?robot ?pos-start ?store)
        (plan-assert-action get-unprocessed-ingredient-from-storage ?robot ?robot ?store ?lettuce)
        (plan-assert-action move-to ?robot ?robot ?store ?cb)
        (plan-assert-action put-vegetable-on-chopping-board ?robot ?robot ?cb ?lettuce)
        (plan-assert-action chop-vegetable ?robot ?robot ?cb ?lettuce)
        (plan-assert-action take-vegetable-from-chopping-board ?robot ?robot ?cb ?lettuce)
        (plan-assert-action move-to ?robot ?robot ?cb ?counter)
        (plan-assert-action put-ingredient-on-plate ?robot ?robot ?counter ?lettuce LETTUCE ?plate ?slot)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-put-chopped-tomato-on-plate
    ?g <-   (goal   (id ?goal-id)
                    (class PUT-CHOPPED-TOMATO-ON-PLATE)
                    (mode SELECTED)
                    (params order ?order)
                    (assigned-to ?robot&~nil)
            )
    (wm-fact (key domain fact ingredient-type args? i ?tomato tn TOMATO))
    (wm-fact (key domain fact ingredient-state args? i ?tomato sn UNPROCESSED))
    (wm-fact (key domain fact item-at-station args? s ?store i ?tomato))
    (wm-fact (key domain fact station-type args? s ?store tn STORAGE))
    (wm-fact (key domain fact station-type args? s ?cb tn CHOPPING_BOARD))
    (wm-fact (key domain fact station-type args? s ?counter tn COUNTER))
    (wm-fact (key domain fact station-state args? s ?cb sn IDLE))
    (wm-fact (key domain fact plate-for-order args? o ?order p ?plate))
    (wm-fact (key domain fact item-at-station args? s ?counter i ?plate))
    (wm-fact (key domain fact order-slot args? o ?order sl ?slot in TOMATO))
    (wm-fact (key domain fact plate-slot args? p ?plate sl ?slot in NONE))
    (wm-fact (key domain fact at args? r ?robot l ?pos-start))
    =>
    (plan-assert-sequential (sym-cat PUT-CHOPPED-TOMATO-ON-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?robot ?pos-start ?store)
        (plan-assert-action get-unprocessed-ingredient-from-storage ?robot ?robot ?store ?tomato)
        (plan-assert-action move-to ?robot ?robot ?store ?cb)
        (plan-assert-action put-vegetable-on-chopping-board ?robot ?robot ?cb ?tomato)
        (plan-assert-action chop-vegetable ?robot ?robot ?cb ?tomato)
        (plan-assert-action take-vegetable-from-chopping-board ?robot ?robot ?cb ?tomato)
        (plan-assert-action move-to ?robot ?robot ?cb ?counter)
        (plan-assert-action put-ingredient-on-plate ?robot ?robot ?counter ?tomato TOMATO ?plate ?slot)
    )
    (modify ?g (mode EXPANDED))
)

(defrule goal-expander-deliver-plate
    ?g <-   (goal   (id ?goal-id)
                    (class DELIVER-PLATE)
                    (mode SELECTED)
                    (params order ?order)
                    (assigned-to ?robot&~nil)
            )
    (wm-fact (key domain fact station-type args? s ?delivery tn DELIVERY))
    (wm-fact (key domain fact station-type args? s ?counter tn COUNTER))
    (wm-fact (key domain fact item-at-station args? s ?counter i ?plate))
    (wm-fact (key domain fact plate-for-order args? o ?order p ?plate))

    (wm-fact (key domain fact order-slot args? o ?order sl ONE in ?i1))
    (wm-fact (key domain fact order-slot args? o ?order sl TWO in ?i2))
    (wm-fact (key domain fact order-slot args? o ?order sl THREE in ?i3))
    (wm-fact (key domain fact order-slot args? o ?order sl FOUR in ?i4))
    (wm-fact (key domain fact order-slot args? o ?order sl FIVE in ?i5))
    (wm-fact (key domain fact at args? r ?robot l ?pos-start))

    =>
    (plan-assert-sequential (sym-cat DELIVER-PLATE-PLAN- (gensym*)) ?goal-id
        (plan-assert-action move-to ?robot ?robot ?pos-start ?counter)
        (plan-assert-action pick-up-plate-from-counter ?robot ?robot ?counter ?plate)
        (plan-assert-action move-to ?robot ?robot ?counter ?delivery)
        (plan-assert-action deliver-plate ?robot ?robot ?delivery ?plate ?order ?i1 ?i2 ?i3 ?i4 ?i5)
    )
    (modify ?g (mode EXPANDED))
)